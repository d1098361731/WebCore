// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebEf;

namespace CoreEf.Migrations
{
    [DbContext(typeof(EFDbContext))]
    [Migration("20191224025613_WebCore_1224")]
    partial class WebCore_1224
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Model.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Createdate");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("Remark");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("Core.Model.BlogArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsDeleted");

                    b.Property<DateTime>("bCreateTime");

                    b.Property<string>("bRemark");

                    b.Property<DateTime>("bUpdateTime");

                    b.Property<string>("bcategory");

                    b.Property<int>("bcommentNum");

                    b.Property<string>("bcontent");

                    b.Property<string>("bsubmitter")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("btitle");

                    b.Property<int>("btraffic");

                    b.HasKey("Id");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("Core.Model.Love", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Love");
                });

            modelBuilder.Entity("Core.Model.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<string>("Icon")
                        .HasMaxLength(100);

                    b.Property<int>("Index");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<Guid?>("ParentMentId");

                    b.Property<string>("Path")
                        .HasMaxLength(200);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<string>("Tooptip")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ParentMentId");

                    b.ToTable("Sys_Menu");

                    b.HasData(
                        new { Id = new Guid("95f9e740-a05e-4e88-88da-c566ab42ae3f"), Icon = "el-icon-s-custom", Index = 0, Label = "主界面", Name = "Main", Path = "/", Remarks = "", Tooptip = "主界面提示" },
                        new { Id = new Guid("ad718b11-5353-44c1-844f-0bbf05742cbf"), Icon = "el-icon-s-custom", Index = 1, Label = "成员管理", Name = "userManager", Path = "/userManager", Remarks = "", Tooptip = "成员管理" }
                    );
                });

            modelBuilder.Entity("Core.Model.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<string>("Label");

                    b.Property<string>("Name");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("Sys_Role");
                });

            modelBuilder.Entity("Core.Model.RoleMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<Guid>("MenuId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("Sys_RoleMenu");
                });

            modelBuilder.Entity("Core.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("Company")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.ToTable("Sys_User");

                    b.HasData(
                        new { Id = new Guid("37a4fb87-6e0e-4fb0-9df5-a9b1948ac660"), Address = "管理员测试地址", Company = "西安新时间", Name = "admin", Password = "admin", Remarks = "", State = 1 }
                    );
                });

            modelBuilder.Entity("Core.Model.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40);

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sys_UserRole");
                });

            modelBuilder.Entity("Core.Model.Menu", b =>
                {
                    b.HasOne("Core.Model.Menu", "ParentMent")
                        .WithMany("ChildMents")
                        .HasForeignKey("ParentMentId");
                });

            modelBuilder.Entity("Core.Model.RoleMenu", b =>
                {
                    b.HasOne("Core.Model.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Model.UserRole", b =>
                {
                    b.HasOne("Core.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
